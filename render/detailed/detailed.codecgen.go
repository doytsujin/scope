// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package detailed

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_xfer "github.com/weaveworks/scope/common/xfer"
	pkg1_report "github.com/weaveworks/scope/report"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF85934 = 1
	codecSelferC_RAW5934  = 0
	// ----- value types used ----
	codecSelferValueTypeArray5934 = 10
	codecSelferValueTypeMap5934   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey5934    = 2
	codecSelfer_containerMapValue5934  = 3
	codecSelfer_containerMapEnd5934    = 4
	codecSelfer_containerArrayElem5934 = 6
	codecSelfer_containerArrayEnd5934  = 7
)

var (
	codecSelferBitsize5934                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr5934 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer5934 struct{}

func init() {
	if codec1978.GenVersion != 6 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			6, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_xfer.PluginSpecs
		var v1 pkg1_report.MetadataRow
		var v2 time.Time
		_, _, _ = v0, v1, v2
	}
}

func (x *ConnectionsSummary) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.TopologyID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("topologyId"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.TopologyID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if x.Columns == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						h.encSliceColumn(([]Column)(x.Columns), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("columns"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				if x.Columns == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						h.encSliceColumn(([]Column)(x.Columns), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if x.Connections == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						h.encSliceConnection(([]Connection)(x.Connections), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("connections"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				if x.Connections == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						h.encSliceConnection(([]Connection)(x.Connections), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd5934)
			}
		}
	}
}

func (x *ConnectionsSummary) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap5934 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd5934)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray5934 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr5934)
		}
	}
}

func (x *ConnectionsSummary) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey5934)
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue5934)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "topologyId":
			if r.TryDecodeAsNil() {
				x.TopologyID = ""
			} else {
				yyv6 := &x.TopologyID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv8 := &x.Label
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "columns":
			if r.TryDecodeAsNil() {
				x.Columns = nil
			} else {
				yyv10 := &x.Columns
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					h.decSliceColumn((*[]Column)(yyv10), d)
				}
			}
		case "connections":
			if r.TryDecodeAsNil() {
				x.Connections = nil
			} else {
				yyv12 := &x.Connections
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					h.decSliceConnection((*[]Connection)(yyv12), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd5934)
}

func (x *ConnectionsSummary) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv15 := &x.ID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.TopologyID = ""
	} else {
		yyv17 := &x.TopologyID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv19 := &x.Label
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Columns = nil
	} else {
		yyv21 := &x.Columns
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			h.decSliceColumn((*[]Column)(yyv21), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Connections = nil
	} else {
		yyv23 := &x.Connections
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			h.decSliceConnection((*[]Connection)(yyv23), d)
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem5934)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x *Connection) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[3] = x.LabelMinor != ""
			yyq2[4] = len(x.Metadata) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("nodeId"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF85934, string(x.LabelMinor))
					}
				} else {
					r.EncodeString(codecSelferC_UTF85934, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("labelMinor"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF85934, string(x.LabelMinor))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[4] {
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym16 := z.EncBinary()
						_ = yym16
						if false {
						} else {
							h.encSlicereport_MetadataRow(([]pkg1_report.MetadataRow)(x.Metadata), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym17 := z.EncBinary()
						_ = yym17
						if false {
						} else {
							h.encSlicereport_MetadataRow(([]pkg1_report.MetadataRow)(x.Metadata), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd5934)
			}
		}
	}
}

func (x *Connection) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap5934 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd5934)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray5934 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr5934)
		}
	}
}

func (x *Connection) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey5934)
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue5934)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "nodeId":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv6 := &x.NodeID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv8 := &x.Label
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "labelMinor":
			if r.TryDecodeAsNil() {
				x.LabelMinor = ""
			} else {
				yyv10 := &x.LabelMinor
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.Metadata = nil
			} else {
				yyv12 := &x.Metadata
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					h.decSlicereport_MetadataRow((*[]pkg1_report.MetadataRow)(yyv12), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd5934)
}

func (x *Connection) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv15 := &x.ID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv17 := &x.NodeID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv19 := &x.Label
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.LabelMinor = ""
	} else {
		yyv21 := &x.LabelMinor
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Metadata = nil
	} else {
		yyv23 := &x.Metadata
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			h.decSlicereport_MetadataRow((*[]pkg1_report.MetadataRow)(yyv23), d)
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem5934)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x connectionsByID) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encconnectionsByID((connectionsByID)(x), e)
		}
	}
}

func (x *connectionsByID) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decconnectionsByID((*connectionsByID)(x), d)
	}
}

func (x *connection) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [0]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(0)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd5934)
			}
		}
	}
}

func (x *connection) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap5934 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd5934)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray5934 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr5934)
		}
	}
}

func (x *connection) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey5934)
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue5934)
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd5934)
}

func (x *connection) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem5934)
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x *connectionCounters) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [0]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(0)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd5934)
			}
		}
	}
}

func (x *connectionCounters) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap5934 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd5934)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray5934 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr5934)
		}
	}
}

func (x *connectionCounters) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey5934)
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue5934)
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd5934)
}

func (x *connectionCounters) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem5934)
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [16]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[4] = x.Shape != ""
			yyq2[5] = x.Tag != ""
			yyq2[6] = x.Stack != false
			yyq2[7] = x.Pseudo != false
			yyq2[8] = len(x.Metadata) != 0
			yyq2[9] = len(x.Parents) != 0
			yyq2[10] = len(x.Metrics) != 0
			yyq2[11] = len(x.Tables) != 0
			yyq2[12] = len(x.Adjacency) != 0
			yyq2[14] = len(x.Children) != 0
			yyq2[15] = len(x.Connections) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(16)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.LabelMinor))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("labelMinor"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.LabelMinor))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Rank))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("rank"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Rank))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF85934, string(x.Shape))
					}
				} else {
					r.EncodeString(codecSelferC_UTF85934, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("shape"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF85934, string(x.Shape))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF85934, string(x.Tag))
					}
				} else {
					r.EncodeString(codecSelferC_UTF85934, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("tag"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF85934, string(x.Tag))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeBool(bool(x.Stack))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("stack"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeBool(bool(x.Stack))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[7] {
					yym25 := z.EncBinary()
					_ = yym25
					if false {
					} else {
						r.EncodeBool(bool(x.Pseudo))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("pseudo"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else {
						r.EncodeBool(bool(x.Pseudo))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[8] {
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym28 := z.EncBinary()
						_ = yym28
						if false {
						} else {
							h.encSlicereport_MetadataRow(([]pkg1_report.MetadataRow)(x.Metadata), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym29 := z.EncBinary()
						_ = yym29
						if false {
						} else {
							h.encSlicereport_MetadataRow(([]pkg1_report.MetadataRow)(x.Metadata), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[9] {
					if x.Parents == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else {
							h.encSliceParent(([]Parent)(x.Parents), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("parents"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					if x.Parents == nil {
						r.EncodeNil()
					} else {
						yym32 := z.EncBinary()
						_ = yym32
						if false {
						} else {
							h.encSliceParent(([]Parent)(x.Parents), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[10] {
					if x.Metrics == nil {
						r.EncodeNil()
					} else {
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							h.encSlicereport_MetricRow(([]pkg1_report.MetricRow)(x.Metrics), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("metrics"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					if x.Metrics == nil {
						r.EncodeNil()
					} else {
						yym35 := z.EncBinary()
						_ = yym35
						if false {
						} else {
							h.encSlicereport_MetricRow(([]pkg1_report.MetricRow)(x.Metrics), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[11] {
					if x.Tables == nil {
						r.EncodeNil()
					} else {
						yym37 := z.EncBinary()
						_ = yym37
						if false {
						} else {
							h.encSlicereport_Table(([]pkg1_report.Table)(x.Tables), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("tables"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					if x.Tables == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							h.encSlicereport_Table(([]pkg1_report.Table)(x.Tables), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[12] {
					if x.Adjacency == nil {
						r.EncodeNil()
					} else {
						yysf40 := &x.Adjacency
						yysf40.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("adjacency"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					if x.Adjacency == nil {
						r.EncodeNil()
					} else {
						yysf41 := &x.Adjacency
						yysf41.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if x.Controls == nil {
					r.EncodeNil()
				} else {
					yym43 := z.EncBinary()
					_ = yym43
					if false {
					} else {
						h.encSliceControlInstance(([]ControlInstance)(x.Controls), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("controls"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				if x.Controls == nil {
					r.EncodeNil()
				} else {
					yym44 := z.EncBinary()
					_ = yym44
					if false {
					} else {
						h.encSliceControlInstance(([]ControlInstance)(x.Controls), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[14] {
					if x.Children == nil {
						r.EncodeNil()
					} else {
						yym46 := z.EncBinary()
						_ = yym46
						if false {
						} else {
							h.encSliceNodeSummaryGroup(([]NodeSummaryGroup)(x.Children), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("children"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					if x.Children == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							h.encSliceNodeSummaryGroup(([]NodeSummaryGroup)(x.Children), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[15] {
					if x.Connections == nil {
						r.EncodeNil()
					} else {
						yym49 := z.EncBinary()
						_ = yym49
						if false {
						} else {
							h.encSliceConnectionsSummary(([]ConnectionsSummary)(x.Connections), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("connections"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					if x.Connections == nil {
						r.EncodeNil()
					} else {
						yym50 := z.EncBinary()
						_ = yym50
						if false {
						} else {
							h.encSliceConnectionsSummary(([]ConnectionsSummary)(x.Connections), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd5934)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap5934 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd5934)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray5934 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr5934)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey5934)
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue5934)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv6 := &x.Label
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "labelMinor":
			if r.TryDecodeAsNil() {
				x.LabelMinor = ""
			} else {
				yyv8 := &x.LabelMinor
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "rank":
			if r.TryDecodeAsNil() {
				x.Rank = ""
			} else {
				yyv10 := &x.Rank
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "shape":
			if r.TryDecodeAsNil() {
				x.Shape = ""
			} else {
				yyv12 := &x.Shape
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "tag":
			if r.TryDecodeAsNil() {
				x.Tag = ""
			} else {
				yyv14 := &x.Tag
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "stack":
			if r.TryDecodeAsNil() {
				x.Stack = false
			} else {
				yyv16 := &x.Stack
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "pseudo":
			if r.TryDecodeAsNil() {
				x.Pseudo = false
			} else {
				yyv18 := &x.Pseudo
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*bool)(yyv18)) = r.DecodeBool()
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.Metadata = nil
			} else {
				yyv20 := &x.Metadata
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					h.decSlicereport_MetadataRow((*[]pkg1_report.MetadataRow)(yyv20), d)
				}
			}
		case "parents":
			if r.TryDecodeAsNil() {
				x.Parents = nil
			} else {
				yyv22 := &x.Parents
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					h.decSliceParent((*[]Parent)(yyv22), d)
				}
			}
		case "metrics":
			if r.TryDecodeAsNil() {
				x.Metrics = nil
			} else {
				yyv24 := &x.Metrics
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					h.decSlicereport_MetricRow((*[]pkg1_report.MetricRow)(yyv24), d)
				}
			}
		case "tables":
			if r.TryDecodeAsNil() {
				x.Tables = nil
			} else {
				yyv26 := &x.Tables
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					h.decSlicereport_Table((*[]pkg1_report.Table)(yyv26), d)
				}
			}
		case "adjacency":
			if r.TryDecodeAsNil() {
				x.Adjacency = nil
			} else {
				yyv28 := &x.Adjacency
				yyv28.CodecDecodeSelf(d)
			}
		case "controls":
			if r.TryDecodeAsNil() {
				x.Controls = nil
			} else {
				yyv29 := &x.Controls
				yym30 := z.DecBinary()
				_ = yym30
				if false {
				} else {
					h.decSliceControlInstance((*[]ControlInstance)(yyv29), d)
				}
			}
		case "children":
			if r.TryDecodeAsNil() {
				x.Children = nil
			} else {
				yyv31 := &x.Children
				yym32 := z.DecBinary()
				_ = yym32
				if false {
				} else {
					h.decSliceNodeSummaryGroup((*[]NodeSummaryGroup)(yyv31), d)
				}
			}
		case "connections":
			if r.TryDecodeAsNil() {
				x.Connections = nil
			} else {
				yyv33 := &x.Connections
				yym34 := z.DecBinary()
				_ = yym34
				if false {
				} else {
					h.decSliceConnectionsSummary((*[]ConnectionsSummary)(yyv33), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd5934)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj35 int
	var yyb35 bool
	var yyhl35 bool = l >= 0
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv36 := &x.ID
		yym37 := z.DecBinary()
		_ = yym37
		if false {
		} else {
			*((*string)(yyv36)) = r.DecodeString()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv38 := &x.Label
		yym39 := z.DecBinary()
		_ = yym39
		if false {
		} else {
			*((*string)(yyv38)) = r.DecodeString()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.LabelMinor = ""
	} else {
		yyv40 := &x.LabelMinor
		yym41 := z.DecBinary()
		_ = yym41
		if false {
		} else {
			*((*string)(yyv40)) = r.DecodeString()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Rank = ""
	} else {
		yyv42 := &x.Rank
		yym43 := z.DecBinary()
		_ = yym43
		if false {
		} else {
			*((*string)(yyv42)) = r.DecodeString()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Shape = ""
	} else {
		yyv44 := &x.Shape
		yym45 := z.DecBinary()
		_ = yym45
		if false {
		} else {
			*((*string)(yyv44)) = r.DecodeString()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Tag = ""
	} else {
		yyv46 := &x.Tag
		yym47 := z.DecBinary()
		_ = yym47
		if false {
		} else {
			*((*string)(yyv46)) = r.DecodeString()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Stack = false
	} else {
		yyv48 := &x.Stack
		yym49 := z.DecBinary()
		_ = yym49
		if false {
		} else {
			*((*bool)(yyv48)) = r.DecodeBool()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Pseudo = false
	} else {
		yyv50 := &x.Pseudo
		yym51 := z.DecBinary()
		_ = yym51
		if false {
		} else {
			*((*bool)(yyv50)) = r.DecodeBool()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Metadata = nil
	} else {
		yyv52 := &x.Metadata
		yym53 := z.DecBinary()
		_ = yym53
		if false {
		} else {
			h.decSlicereport_MetadataRow((*[]pkg1_report.MetadataRow)(yyv52), d)
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Parents = nil
	} else {
		yyv54 := &x.Parents
		yym55 := z.DecBinary()
		_ = yym55
		if false {
		} else {
			h.decSliceParent((*[]Parent)(yyv54), d)
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Metrics = nil
	} else {
		yyv56 := &x.Metrics
		yym57 := z.DecBinary()
		_ = yym57
		if false {
		} else {
			h.decSlicereport_MetricRow((*[]pkg1_report.MetricRow)(yyv56), d)
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Tables = nil
	} else {
		yyv58 := &x.Tables
		yym59 := z.DecBinary()
		_ = yym59
		if false {
		} else {
			h.decSlicereport_Table((*[]pkg1_report.Table)(yyv58), d)
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Adjacency = nil
	} else {
		yyv60 := &x.Adjacency
		yyv60.CodecDecodeSelf(d)
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Controls = nil
	} else {
		yyv61 := &x.Controls
		yym62 := z.DecBinary()
		_ = yym62
		if false {
		} else {
			h.decSliceControlInstance((*[]ControlInstance)(yyv61), d)
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Children = nil
	} else {
		yyv63 := &x.Children
		yym64 := z.DecBinary()
		_ = yym64
		if false {
		} else {
			h.decSliceNodeSummaryGroup((*[]NodeSummaryGroup)(yyv63), d)
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Connections = nil
	} else {
		yyv65 := &x.Connections
		yym66 := z.DecBinary()
		_ = yym66
		if false {
		} else {
			h.decSliceConnectionsSummary((*[]ConnectionsSummary)(yyv65), d)
		}
	}
	for {
		yyj35++
		if yyhl35 {
			yyb35 = yyj35 > l
		} else {
			yyb35 = r.CheckBreak()
		}
		if yyb35 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem5934)
		z.DecStructFieldNotFound(yyj35-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x *wiredControlInstance) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ProbeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("probeId"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ProbeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("nodeId"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Human))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("human"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Human))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Icon))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("icon"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Icon))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeInt(int64(x.Rank))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("rank"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeInt(int64(x.Rank))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd5934)
			}
		}
	}
}

func (x *wiredControlInstance) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap5934 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd5934)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray5934 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr5934)
		}
	}
}

func (x *wiredControlInstance) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey5934)
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue5934)
		switch yys3 {
		case "probeId":
			if r.TryDecodeAsNil() {
				x.ProbeID = ""
			} else {
				yyv4 := &x.ProbeID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "nodeId":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv6 := &x.NodeID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv8 := &x.ID
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "human":
			if r.TryDecodeAsNil() {
				x.Human = ""
			} else {
				yyv10 := &x.Human
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "icon":
			if r.TryDecodeAsNil() {
				x.Icon = ""
			} else {
				yyv12 := &x.Icon
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "rank":
			if r.TryDecodeAsNil() {
				x.Rank = 0
			} else {
				yyv14 := &x.Rank
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*int)(yyv14)) = int(r.DecodeInt(codecSelferBitsize5934))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd5934)
}

func (x *wiredControlInstance) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.ProbeID = ""
	} else {
		yyv17 := &x.ProbeID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv19 := &x.NodeID
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv21 := &x.ID
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Human = ""
	} else {
		yyv23 := &x.Human
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Icon = ""
	} else {
		yyv25 := &x.Icon
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Rank = 0
	} else {
		yyv27 := &x.Rank
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*int)(yyv27)) = int(r.DecodeInt(codecSelferBitsize5934))
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem5934)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x *RenderContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [29]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(29)
			} else {
				yynn2 = 29
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy4 := &x.Endpoint
				yy4.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("Endpoint"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy6 := &x.Endpoint
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy9 := &x.Process
				yy9.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("Process"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy11 := &x.Process
				yy11.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy14 := &x.Container
				yy14.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy16 := &x.Container
				yy16.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy19 := &x.Pod
				yy19.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("Pod"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy21 := &x.Pod
				yy21.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy24 := &x.Service
				yy24.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("Service"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy26 := &x.Service
				yy26.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy29 := &x.Deployment
				yy29.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("Deployment"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy31 := &x.Deployment
				yy31.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy34 := &x.ReplicaSet
				yy34.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("ReplicaSet"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy36 := &x.ReplicaSet
				yy36.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy39 := &x.DaemonSet
				yy39.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("DaemonSet"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy41 := &x.DaemonSet
				yy41.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy44 := &x.StatefulSet
				yy44.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("StatefulSet"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy46 := &x.StatefulSet
				yy46.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy49 := &x.CronJob
				yy49.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("CronJob"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy51 := &x.CronJob
				yy51.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy54 := &x.Namespace
				yy54.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy56 := &x.Namespace
				yy56.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy59 := &x.ContainerImage
				yy59.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("ContainerImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy61 := &x.ContainerImage
				yy61.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy64 := &x.Host
				yy64.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("Host"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy66 := &x.Host
				yy66.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy69 := &x.ECSTask
				yy69.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("ECSTask"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy71 := &x.ECSTask
				yy71.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy74 := &x.ECSService
				yy74.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("ECSService"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy76 := &x.ECSService
				yy76.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy79 := &x.SwarmService
				yy79.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("SwarmService"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy81 := &x.SwarmService
				yy81.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy84 := &x.Overlay
				yy84.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("Overlay"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy86 := &x.Overlay
				yy86.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy89 := &x.PersistentVolume
				yy89.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("PersistentVolume"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy91 := &x.PersistentVolume
				yy91.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy94 := &x.PersistentVolumeClaim
				yy94.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("PersistentVolumeClaim"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy96 := &x.PersistentVolumeClaim
				yy96.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy99 := &x.StorageClass
				yy99.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("StorageClass"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy101 := &x.StorageClass
				yy101.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy104 := &x.VolumeSnapshot
				yy104.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("VolumeSnapshot"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy106 := &x.VolumeSnapshot
				yy106.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy109 := &x.VolumeSnapshotData
				yy109.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("VolumeSnapshotData"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy111 := &x.VolumeSnapshotData
				yy111.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if x.DNS == nil {
					r.EncodeNil()
				} else {
					yysf114 := &x.DNS
					yysf114.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("DNS"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				if x.DNS == nil {
					r.EncodeNil()
				} else {
					yysf115 := &x.DNS
					yysf115.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy117 := &x.Sampling
				yy117.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("Sampling"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy119 := &x.Sampling
				yy119.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym122 := z.EncBinary()
				_ = yym122
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Window) {
				} else {
					r.EncodeInt(int64(x.Window))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("Window"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym123 := z.EncBinary()
				_ = yym123
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Window) {
				} else {
					r.EncodeInt(int64(x.Window))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym125 := z.EncBinary()
				_ = yym125
				if false {
				} else {
					r.EncodeBool(bool(x.Shortcut))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("Shortcut"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym126 := z.EncBinary()
				_ = yym126
				if false {
				} else {
					r.EncodeBool(bool(x.Shortcut))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yy128 := &x.Plugins
				yy128.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("Plugins"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yy130 := &x.Plugins
				yy130.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym133 := z.EncBinary()
				_ = yym133
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym134 := z.EncBinary()
				_ = yym134
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym136 := z.EncBinary()
				_ = yym136
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.MetricsGraphURL))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("MetricsGraphURL"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym137 := z.EncBinary()
				_ = yym137
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.MetricsGraphURL))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd5934)
			}
		}
	}
}

func (x *RenderContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap5934 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd5934)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray5934 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr5934)
		}
	}
}

func (x *RenderContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey5934)
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue5934)
		switch yys3 {
		case "Endpoint":
			if r.TryDecodeAsNil() {
				x.Endpoint = pkg1_report.Topology{}
			} else {
				yyv4 := &x.Endpoint
				yyv4.CodecDecodeSelf(d)
			}
		case "Process":
			if r.TryDecodeAsNil() {
				x.Process = pkg1_report.Topology{}
			} else {
				yyv5 := &x.Process
				yyv5.CodecDecodeSelf(d)
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = pkg1_report.Topology{}
			} else {
				yyv6 := &x.Container
				yyv6.CodecDecodeSelf(d)
			}
		case "Pod":
			if r.TryDecodeAsNil() {
				x.Pod = pkg1_report.Topology{}
			} else {
				yyv7 := &x.Pod
				yyv7.CodecDecodeSelf(d)
			}
		case "Service":
			if r.TryDecodeAsNil() {
				x.Service = pkg1_report.Topology{}
			} else {
				yyv8 := &x.Service
				yyv8.CodecDecodeSelf(d)
			}
		case "Deployment":
			if r.TryDecodeAsNil() {
				x.Deployment = pkg1_report.Topology{}
			} else {
				yyv9 := &x.Deployment
				yyv9.CodecDecodeSelf(d)
			}
		case "ReplicaSet":
			if r.TryDecodeAsNil() {
				x.ReplicaSet = pkg1_report.Topology{}
			} else {
				yyv10 := &x.ReplicaSet
				yyv10.CodecDecodeSelf(d)
			}
		case "DaemonSet":
			if r.TryDecodeAsNil() {
				x.DaemonSet = pkg1_report.Topology{}
			} else {
				yyv11 := &x.DaemonSet
				yyv11.CodecDecodeSelf(d)
			}
		case "StatefulSet":
			if r.TryDecodeAsNil() {
				x.StatefulSet = pkg1_report.Topology{}
			} else {
				yyv12 := &x.StatefulSet
				yyv12.CodecDecodeSelf(d)
			}
		case "CronJob":
			if r.TryDecodeAsNil() {
				x.CronJob = pkg1_report.Topology{}
			} else {
				yyv13 := &x.CronJob
				yyv13.CodecDecodeSelf(d)
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = pkg1_report.Topology{}
			} else {
				yyv14 := &x.Namespace
				yyv14.CodecDecodeSelf(d)
			}
		case "ContainerImage":
			if r.TryDecodeAsNil() {
				x.ContainerImage = pkg1_report.Topology{}
			} else {
				yyv15 := &x.ContainerImage
				yyv15.CodecDecodeSelf(d)
			}
		case "Host":
			if r.TryDecodeAsNil() {
				x.Host = pkg1_report.Topology{}
			} else {
				yyv16 := &x.Host
				yyv16.CodecDecodeSelf(d)
			}
		case "ECSTask":
			if r.TryDecodeAsNil() {
				x.ECSTask = pkg1_report.Topology{}
			} else {
				yyv17 := &x.ECSTask
				yyv17.CodecDecodeSelf(d)
			}
		case "ECSService":
			if r.TryDecodeAsNil() {
				x.ECSService = pkg1_report.Topology{}
			} else {
				yyv18 := &x.ECSService
				yyv18.CodecDecodeSelf(d)
			}
		case "SwarmService":
			if r.TryDecodeAsNil() {
				x.SwarmService = pkg1_report.Topology{}
			} else {
				yyv19 := &x.SwarmService
				yyv19.CodecDecodeSelf(d)
			}
		case "Overlay":
			if r.TryDecodeAsNil() {
				x.Overlay = pkg1_report.Topology{}
			} else {
				yyv20 := &x.Overlay
				yyv20.CodecDecodeSelf(d)
			}
		case "PersistentVolume":
			if r.TryDecodeAsNil() {
				x.PersistentVolume = pkg1_report.Topology{}
			} else {
				yyv21 := &x.PersistentVolume
				yyv21.CodecDecodeSelf(d)
			}
		case "PersistentVolumeClaim":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeClaim = pkg1_report.Topology{}
			} else {
				yyv22 := &x.PersistentVolumeClaim
				yyv22.CodecDecodeSelf(d)
			}
		case "StorageClass":
			if r.TryDecodeAsNil() {
				x.StorageClass = pkg1_report.Topology{}
			} else {
				yyv23 := &x.StorageClass
				yyv23.CodecDecodeSelf(d)
			}
		case "VolumeSnapshot":
			if r.TryDecodeAsNil() {
				x.VolumeSnapshot = pkg1_report.Topology{}
			} else {
				yyv24 := &x.VolumeSnapshot
				yyv24.CodecDecodeSelf(d)
			}
		case "VolumeSnapshotData":
			if r.TryDecodeAsNil() {
				x.VolumeSnapshotData = pkg1_report.Topology{}
			} else {
				yyv25 := &x.VolumeSnapshotData
				yyv25.CodecDecodeSelf(d)
			}
		case "DNS":
			if r.TryDecodeAsNil() {
				x.DNS = nil
			} else {
				yyv26 := &x.DNS
				yyv26.CodecDecodeSelf(d)
			}
		case "Sampling":
			if r.TryDecodeAsNil() {
				x.Sampling = pkg1_report.Sampling{}
			} else {
				yyv27 := &x.Sampling
				yyv27.CodecDecodeSelf(d)
			}
		case "Window":
			if r.TryDecodeAsNil() {
				x.Window = 0
			} else {
				yyv28 := &x.Window
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv28) {
				} else {
					*((*int64)(yyv28)) = int64(r.DecodeInt(64))
				}
			}
		case "Shortcut":
			if r.TryDecodeAsNil() {
				x.Shortcut = false
			} else {
				yyv30 := &x.Shortcut
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					*((*bool)(yyv30)) = r.DecodeBool()
				}
			}
		case "Plugins":
			if r.TryDecodeAsNil() {
				x.Plugins = pkg2_xfer.PluginSpecs{}
			} else {
				yyv32 := &x.Plugins
				yyv32.CodecDecodeSelf(d)
			}
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv33 := &x.ID
				yym34 := z.DecBinary()
				_ = yym34
				if false {
				} else {
					*((*string)(yyv33)) = r.DecodeString()
				}
			}
		case "MetricsGraphURL":
			if r.TryDecodeAsNil() {
				x.MetricsGraphURL = ""
			} else {
				yyv35 := &x.MetricsGraphURL
				yym36 := z.DecBinary()
				_ = yym36
				if false {
				} else {
					*((*string)(yyv35)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd5934)
}

func (x *RenderContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj37 int
	var yyb37 bool
	var yyhl37 bool = l >= 0
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Endpoint = pkg1_report.Topology{}
	} else {
		yyv38 := &x.Endpoint
		yyv38.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Process = pkg1_report.Topology{}
	} else {
		yyv39 := &x.Process
		yyv39.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Container = pkg1_report.Topology{}
	} else {
		yyv40 := &x.Container
		yyv40.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Pod = pkg1_report.Topology{}
	} else {
		yyv41 := &x.Pod
		yyv41.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Service = pkg1_report.Topology{}
	} else {
		yyv42 := &x.Service
		yyv42.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Deployment = pkg1_report.Topology{}
	} else {
		yyv43 := &x.Deployment
		yyv43.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.ReplicaSet = pkg1_report.Topology{}
	} else {
		yyv44 := &x.ReplicaSet
		yyv44.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.DaemonSet = pkg1_report.Topology{}
	} else {
		yyv45 := &x.DaemonSet
		yyv45.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.StatefulSet = pkg1_report.Topology{}
	} else {
		yyv46 := &x.StatefulSet
		yyv46.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.CronJob = pkg1_report.Topology{}
	} else {
		yyv47 := &x.CronJob
		yyv47.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Namespace = pkg1_report.Topology{}
	} else {
		yyv48 := &x.Namespace
		yyv48.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.ContainerImage = pkg1_report.Topology{}
	} else {
		yyv49 := &x.ContainerImage
		yyv49.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Host = pkg1_report.Topology{}
	} else {
		yyv50 := &x.Host
		yyv50.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.ECSTask = pkg1_report.Topology{}
	} else {
		yyv51 := &x.ECSTask
		yyv51.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.ECSService = pkg1_report.Topology{}
	} else {
		yyv52 := &x.ECSService
		yyv52.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.SwarmService = pkg1_report.Topology{}
	} else {
		yyv53 := &x.SwarmService
		yyv53.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Overlay = pkg1_report.Topology{}
	} else {
		yyv54 := &x.Overlay
		yyv54.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.PersistentVolume = pkg1_report.Topology{}
	} else {
		yyv55 := &x.PersistentVolume
		yyv55.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeClaim = pkg1_report.Topology{}
	} else {
		yyv56 := &x.PersistentVolumeClaim
		yyv56.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.StorageClass = pkg1_report.Topology{}
	} else {
		yyv57 := &x.StorageClass
		yyv57.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.VolumeSnapshot = pkg1_report.Topology{}
	} else {
		yyv58 := &x.VolumeSnapshot
		yyv58.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.VolumeSnapshotData = pkg1_report.Topology{}
	} else {
		yyv59 := &x.VolumeSnapshotData
		yyv59.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.DNS = nil
	} else {
		yyv60 := &x.DNS
		yyv60.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Sampling = pkg1_report.Sampling{}
	} else {
		yyv61 := &x.Sampling
		yyv61.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Window = 0
	} else {
		yyv62 := &x.Window
		yym63 := z.DecBinary()
		_ = yym63
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv62) {
		} else {
			*((*int64)(yyv62)) = int64(r.DecodeInt(64))
		}
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Shortcut = false
	} else {
		yyv64 := &x.Shortcut
		yym65 := z.DecBinary()
		_ = yym65
		if false {
		} else {
			*((*bool)(yyv64)) = r.DecodeBool()
		}
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Plugins = pkg2_xfer.PluginSpecs{}
	} else {
		yyv66 := &x.Plugins
		yyv66.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv67 := &x.ID
		yym68 := z.DecBinary()
		_ = yym68
		if false {
		} else {
			*((*string)(yyv67)) = r.DecodeString()
		}
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.MetricsGraphURL = ""
	} else {
		yyv69 := &x.MetricsGraphURL
		yym70 := z.DecBinary()
		_ = yym70
		if false {
		} else {
			*((*string)(yyv69)) = r.DecodeString()
		}
	}
	for {
		yyj37++
		if yyhl37 {
			yyb37 = yyj37 > l
		} else {
			yyb37 = r.CheckBreak()
		}
		if yyb37 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem5934)
		z.DecStructFieldNotFound(yyj37-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x *Parent) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.TopologyID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("topologyId"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.TopologyID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd5934)
			}
		}
	}
}

func (x *Parent) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap5934 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd5934)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray5934 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr5934)
		}
	}
}

func (x *Parent) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey5934)
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue5934)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv6 := &x.Label
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "topologyId":
			if r.TryDecodeAsNil() {
				x.TopologyID = ""
			} else {
				yyv8 := &x.TopologyID
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd5934)
}

func (x *Parent) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv11 := &x.ID
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv13 := &x.Label
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.TopologyID = ""
	} else {
		yyv15 := &x.TopologyID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem5934)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x *NodeSummaryGroup) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if x.Nodes == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						h.encSliceNodeSummary(([]NodeSummary)(x.Nodes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("nodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				if x.Nodes == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						h.encSliceNodeSummary(([]NodeSummary)(x.Nodes), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.TopologyID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("topologyId"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.TopologyID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if x.Columns == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						h.encSliceColumn(([]Column)(x.Columns), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("columns"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				if x.Columns == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						h.encSliceColumn(([]Column)(x.Columns), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd5934)
			}
		}
	}
}

func (x *NodeSummaryGroup) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap5934 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd5934)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray5934 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr5934)
		}
	}
}

func (x *NodeSummaryGroup) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey5934)
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue5934)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv6 := &x.Label
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "nodes":
			if r.TryDecodeAsNil() {
				x.Nodes = nil
			} else {
				yyv8 := &x.Nodes
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					h.decSliceNodeSummary((*[]NodeSummary)(yyv8), d)
				}
			}
		case "topologyId":
			if r.TryDecodeAsNil() {
				x.TopologyID = ""
			} else {
				yyv10 := &x.TopologyID
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "columns":
			if r.TryDecodeAsNil() {
				x.Columns = nil
			} else {
				yyv12 := &x.Columns
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					h.decSliceColumn((*[]Column)(yyv12), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd5934)
}

func (x *NodeSummaryGroup) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv15 := &x.ID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv17 := &x.Label
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Nodes = nil
	} else {
		yyv19 := &x.Nodes
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			h.decSliceNodeSummary((*[]NodeSummary)(yyv19), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.TopologyID = ""
	} else {
		yyv21 := &x.TopologyID
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Columns = nil
	} else {
		yyv23 := &x.Columns
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			h.decSliceColumn((*[]Column)(yyv23), d)
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem5934)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x *Column) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeBool(bool(x.DefaultSort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("defaultSort"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeBool(bool(x.DefaultSort))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Datatype))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("dataType"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Datatype))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd5934)
			}
		}
	}
}

func (x *Column) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap5934 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd5934)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray5934 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr5934)
		}
	}
}

func (x *Column) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey5934)
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue5934)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv6 := &x.Label
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "defaultSort":
			if r.TryDecodeAsNil() {
				x.DefaultSort = false
			} else {
				yyv8 := &x.DefaultSort
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*bool)(yyv8)) = r.DecodeBool()
				}
			}
		case "dataType":
			if r.TryDecodeAsNil() {
				x.Datatype = ""
			} else {
				yyv10 := &x.Datatype
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd5934)
}

func (x *Column) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv13 := &x.ID
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv15 := &x.Label
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.DefaultSort = false
	} else {
		yyv17 := &x.DefaultSort
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Datatype = ""
	} else {
		yyv19 := &x.Datatype
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem5934)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x *BasicNodeSummary) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[4] = x.Shape != ""
			yyq2[5] = x.Tag != ""
			yyq2[6] = x.Stack != false
			yyq2[7] = x.Pseudo != false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.LabelMinor))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("labelMinor"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.LabelMinor))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Rank))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("rank"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Rank))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF85934, string(x.Shape))
					}
				} else {
					r.EncodeString(codecSelferC_UTF85934, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("shape"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF85934, string(x.Shape))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF85934, string(x.Tag))
					}
				} else {
					r.EncodeString(codecSelferC_UTF85934, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("tag"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF85934, string(x.Tag))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeBool(bool(x.Stack))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("stack"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeBool(bool(x.Stack))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[7] {
					yym25 := z.EncBinary()
					_ = yym25
					if false {
					} else {
						r.EncodeBool(bool(x.Pseudo))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("pseudo"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else {
						r.EncodeBool(bool(x.Pseudo))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd5934)
			}
		}
	}
}

func (x *BasicNodeSummary) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap5934 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd5934)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray5934 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr5934)
		}
	}
}

func (x *BasicNodeSummary) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey5934)
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue5934)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv6 := &x.Label
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "labelMinor":
			if r.TryDecodeAsNil() {
				x.LabelMinor = ""
			} else {
				yyv8 := &x.LabelMinor
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "rank":
			if r.TryDecodeAsNil() {
				x.Rank = ""
			} else {
				yyv10 := &x.Rank
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "shape":
			if r.TryDecodeAsNil() {
				x.Shape = ""
			} else {
				yyv12 := &x.Shape
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "tag":
			if r.TryDecodeAsNil() {
				x.Tag = ""
			} else {
				yyv14 := &x.Tag
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "stack":
			if r.TryDecodeAsNil() {
				x.Stack = false
			} else {
				yyv16 := &x.Stack
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "pseudo":
			if r.TryDecodeAsNil() {
				x.Pseudo = false
			} else {
				yyv18 := &x.Pseudo
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*bool)(yyv18)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd5934)
}

func (x *BasicNodeSummary) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj20 int
	var yyb20 bool
	var yyhl20 bool = l >= 0
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv21 := &x.ID
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv23 := &x.Label
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.LabelMinor = ""
	} else {
		yyv25 := &x.LabelMinor
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Rank = ""
	} else {
		yyv27 := &x.Rank
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Shape = ""
	} else {
		yyv29 := &x.Shape
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Tag = ""
	} else {
		yyv31 := &x.Tag
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Stack = false
	} else {
		yyv33 := &x.Stack
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*bool)(yyv33)) = r.DecodeBool()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Pseudo = false
	} else {
		yyv35 := &x.Pseudo
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*bool)(yyv35)) = r.DecodeBool()
		}
	}
	for {
		yyj20++
		if yyhl20 {
			yyb20 = yyj20 > l
		} else {
			yyb20 = r.CheckBreak()
		}
		if yyb20 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem5934)
		z.DecStructFieldNotFound(yyj20-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x *NodeSummary) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [13]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[4] = x.Shape != ""
			yyq2[5] = x.Tag != ""
			yyq2[6] = x.Stack != false
			yyq2[7] = x.Pseudo != false
			yyq2[8] = len(x.Metadata) != 0
			yyq2[9] = len(x.Parents) != 0
			yyq2[10] = len(x.Metrics) != 0
			yyq2[11] = len(x.Tables) != 0
			yyq2[12] = len(x.Adjacency) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(13)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.LabelMinor))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("labelMinor"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.LabelMinor))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Rank))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("rank"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF85934, string(x.Rank))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF85934, string(x.Shape))
					}
				} else {
					r.EncodeString(codecSelferC_UTF85934, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("shape"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF85934, string(x.Shape))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF85934, string(x.Tag))
					}
				} else {
					r.EncodeString(codecSelferC_UTF85934, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("tag"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF85934, string(x.Tag))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeBool(bool(x.Stack))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("stack"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeBool(bool(x.Stack))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[7] {
					yym25 := z.EncBinary()
					_ = yym25
					if false {
					} else {
						r.EncodeBool(bool(x.Pseudo))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("pseudo"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else {
						r.EncodeBool(bool(x.Pseudo))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[8] {
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym28 := z.EncBinary()
						_ = yym28
						if false {
						} else {
							h.encSlicereport_MetadataRow(([]pkg1_report.MetadataRow)(x.Metadata), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym29 := z.EncBinary()
						_ = yym29
						if false {
						} else {
							h.encSlicereport_MetadataRow(([]pkg1_report.MetadataRow)(x.Metadata), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[9] {
					if x.Parents == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else {
							h.encSliceParent(([]Parent)(x.Parents), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("parents"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					if x.Parents == nil {
						r.EncodeNil()
					} else {
						yym32 := z.EncBinary()
						_ = yym32
						if false {
						} else {
							h.encSliceParent(([]Parent)(x.Parents), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[10] {
					if x.Metrics == nil {
						r.EncodeNil()
					} else {
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							h.encSlicereport_MetricRow(([]pkg1_report.MetricRow)(x.Metrics), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("metrics"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					if x.Metrics == nil {
						r.EncodeNil()
					} else {
						yym35 := z.EncBinary()
						_ = yym35
						if false {
						} else {
							h.encSlicereport_MetricRow(([]pkg1_report.MetricRow)(x.Metrics), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[11] {
					if x.Tables == nil {
						r.EncodeNil()
					} else {
						yym37 := z.EncBinary()
						_ = yym37
						if false {
						} else {
							h.encSlicereport_Table(([]pkg1_report.Table)(x.Tables), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("tables"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					if x.Tables == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							h.encSlicereport_Table(([]pkg1_report.Table)(x.Tables), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[12] {
					if x.Adjacency == nil {
						r.EncodeNil()
					} else {
						yysf40 := &x.Adjacency
						yysf40.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("adjacency"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					if x.Adjacency == nil {
						r.EncodeNil()
					} else {
						yysf41 := &x.Adjacency
						yysf41.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd5934)
			}
		}
	}
}

func (x *NodeSummary) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap5934 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd5934)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray5934 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr5934)
		}
	}
}

func (x *NodeSummary) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey5934)
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue5934)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv6 := &x.Label
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "labelMinor":
			if r.TryDecodeAsNil() {
				x.LabelMinor = ""
			} else {
				yyv8 := &x.LabelMinor
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "rank":
			if r.TryDecodeAsNil() {
				x.Rank = ""
			} else {
				yyv10 := &x.Rank
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "shape":
			if r.TryDecodeAsNil() {
				x.Shape = ""
			} else {
				yyv12 := &x.Shape
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "tag":
			if r.TryDecodeAsNil() {
				x.Tag = ""
			} else {
				yyv14 := &x.Tag
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "stack":
			if r.TryDecodeAsNil() {
				x.Stack = false
			} else {
				yyv16 := &x.Stack
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "pseudo":
			if r.TryDecodeAsNil() {
				x.Pseudo = false
			} else {
				yyv18 := &x.Pseudo
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*bool)(yyv18)) = r.DecodeBool()
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.Metadata = nil
			} else {
				yyv20 := &x.Metadata
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					h.decSlicereport_MetadataRow((*[]pkg1_report.MetadataRow)(yyv20), d)
				}
			}
		case "parents":
			if r.TryDecodeAsNil() {
				x.Parents = nil
			} else {
				yyv22 := &x.Parents
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					h.decSliceParent((*[]Parent)(yyv22), d)
				}
			}
		case "metrics":
			if r.TryDecodeAsNil() {
				x.Metrics = nil
			} else {
				yyv24 := &x.Metrics
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					h.decSlicereport_MetricRow((*[]pkg1_report.MetricRow)(yyv24), d)
				}
			}
		case "tables":
			if r.TryDecodeAsNil() {
				x.Tables = nil
			} else {
				yyv26 := &x.Tables
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					h.decSlicereport_Table((*[]pkg1_report.Table)(yyv26), d)
				}
			}
		case "adjacency":
			if r.TryDecodeAsNil() {
				x.Adjacency = nil
			} else {
				yyv28 := &x.Adjacency
				yyv28.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd5934)
}

func (x *NodeSummary) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj29 int
	var yyb29 bool
	var yyhl29 bool = l >= 0
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv30 := &x.ID
		yym31 := z.DecBinary()
		_ = yym31
		if false {
		} else {
			*((*string)(yyv30)) = r.DecodeString()
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv32 := &x.Label
		yym33 := z.DecBinary()
		_ = yym33
		if false {
		} else {
			*((*string)(yyv32)) = r.DecodeString()
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.LabelMinor = ""
	} else {
		yyv34 := &x.LabelMinor
		yym35 := z.DecBinary()
		_ = yym35
		if false {
		} else {
			*((*string)(yyv34)) = r.DecodeString()
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Rank = ""
	} else {
		yyv36 := &x.Rank
		yym37 := z.DecBinary()
		_ = yym37
		if false {
		} else {
			*((*string)(yyv36)) = r.DecodeString()
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Shape = ""
	} else {
		yyv38 := &x.Shape
		yym39 := z.DecBinary()
		_ = yym39
		if false {
		} else {
			*((*string)(yyv38)) = r.DecodeString()
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Tag = ""
	} else {
		yyv40 := &x.Tag
		yym41 := z.DecBinary()
		_ = yym41
		if false {
		} else {
			*((*string)(yyv40)) = r.DecodeString()
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Stack = false
	} else {
		yyv42 := &x.Stack
		yym43 := z.DecBinary()
		_ = yym43
		if false {
		} else {
			*((*bool)(yyv42)) = r.DecodeBool()
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Pseudo = false
	} else {
		yyv44 := &x.Pseudo
		yym45 := z.DecBinary()
		_ = yym45
		if false {
		} else {
			*((*bool)(yyv44)) = r.DecodeBool()
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Metadata = nil
	} else {
		yyv46 := &x.Metadata
		yym47 := z.DecBinary()
		_ = yym47
		if false {
		} else {
			h.decSlicereport_MetadataRow((*[]pkg1_report.MetadataRow)(yyv46), d)
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Parents = nil
	} else {
		yyv48 := &x.Parents
		yym49 := z.DecBinary()
		_ = yym49
		if false {
		} else {
			h.decSliceParent((*[]Parent)(yyv48), d)
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Metrics = nil
	} else {
		yyv50 := &x.Metrics
		yym51 := z.DecBinary()
		_ = yym51
		if false {
		} else {
			h.decSlicereport_MetricRow((*[]pkg1_report.MetricRow)(yyv50), d)
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Tables = nil
	} else {
		yyv52 := &x.Tables
		yym53 := z.DecBinary()
		_ = yym53
		if false {
		} else {
			h.decSlicereport_Table((*[]pkg1_report.Table)(yyv52), d)
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Adjacency = nil
	} else {
		yyv54 := &x.Adjacency
		yyv54.CodecDecodeSelf(d)
	}
	for {
		yyj29++
		if yyhl29 {
			yyb29 = yyj29 > l
		} else {
			yyb29 = r.CheckBreak()
		}
		if yyb29 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem5934)
		z.DecStructFieldNotFound(yyj29-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x nodeSummariesByID) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encnodeSummariesByID((nodeSummariesByID)(x), e)
		}
	}
}

func (x *nodeSummariesByID) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decnodeSummariesByID((*nodeSummariesByID)(x), d)
	}
}

func (x NodeSummaries) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encNodeSummaries((NodeSummaries)(x), e)
		}
	}
}

func (x *NodeSummaries) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decNodeSummaries((*NodeSummaries)(x), d)
	}
}

func (x *Diff) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[3] = x.Reset != false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if x.Add == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSliceNodeSummary(([]NodeSummary)(x.Add), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("add"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				if x.Add == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSliceNodeSummary(([]NodeSummary)(x.Add), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if x.Update == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						h.encSliceNodeSummary(([]NodeSummary)(x.Update), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("update"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				if x.Update == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						h.encSliceNodeSummary(([]NodeSummary)(x.Update), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if x.Remove == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						z.F.EncSliceStringV(x.Remove, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey5934)
				r.EncodeString(codecSelferC_UTF85934, string("remove"))
				z.EncSendContainerState(codecSelfer_containerMapValue5934)
				if x.Remove == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						z.F.EncSliceStringV(x.Remove, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem5934)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeBool(bool(x.Reset))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey5934)
					r.EncodeString(codecSelferC_UTF85934, string("reset"))
					z.EncSendContainerState(codecSelfer_containerMapValue5934)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeBool(bool(x.Reset))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd5934)
			}
		}
	}
}

func (x *Diff) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap5934 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd5934)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray5934 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr5934)
		}
	}
}

func (x *Diff) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey5934)
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue5934)
		switch yys3 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv4 := &x.Add
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSliceNodeSummary((*[]NodeSummary)(yyv4), d)
				}
			}
		case "update":
			if r.TryDecodeAsNil() {
				x.Update = nil
			} else {
				yyv6 := &x.Update
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					h.decSliceNodeSummary((*[]NodeSummary)(yyv6), d)
				}
			}
		case "remove":
			if r.TryDecodeAsNil() {
				x.Remove = nil
			} else {
				yyv8 := &x.Remove
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					z.F.DecSliceStringX(yyv8, false, d)
				}
			}
		case "reset":
			if r.TryDecodeAsNil() {
				x.Reset = false
			} else {
				yyv10 := &x.Reset
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd5934)
}

func (x *Diff) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv13 := &x.Add
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSliceNodeSummary((*[]NodeSummary)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Update = nil
	} else {
		yyv15 := &x.Update
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			h.decSliceNodeSummary((*[]NodeSummary)(yyv15), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Remove = nil
	} else {
		yyv17 := &x.Remove
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			z.F.DecSliceStringX(yyv17, false, d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem5934)
	if r.TryDecodeAsNil() {
		x.Reset = false
	} else {
		yyv19 := &x.Reset
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem5934)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x codecSelfer5934) encSliceColumn(v []Column, e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem5934)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x codecSelfer5934) decSliceColumn(v *[]Column, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Column{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 56)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Column, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		yyj1 := 0
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && len(yyv1) == 0 {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 56)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]Column, yyrl1)
				yyc1 = true
			}
			// if indefinite, etc, then expand the slice if necessary
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Column{})
				yyc1 = true

			}
			yyh1.ElemContainerState(yyj1)
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Column{}
				} else {
					yyv2 := &yyv1[yyj1]
					yyv2.CodecDecodeSelf(d)
				}

			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]Column, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}

}

func (x codecSelfer5934) encSliceConnection(v []Connection, e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem5934)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x codecSelfer5934) decSliceConnection(v *[]Connection, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Connection{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 88)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Connection, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		yyj1 := 0
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && len(yyv1) == 0 {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 88)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]Connection, yyrl1)
				yyc1 = true
			}
			// if indefinite, etc, then expand the slice if necessary
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Connection{})
				yyc1 = true

			}
			yyh1.ElemContainerState(yyj1)
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Connection{}
				} else {
					yyv2 := &yyv1[yyj1]
					yyv2.CodecDecodeSelf(d)
				}

			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]Connection, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}

}

func (x codecSelfer5934) encSlicereport_MetadataRow(v []pkg1_report.MetadataRow, e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem5934)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x codecSelfer5934) decSlicereport_MetadataRow(v *[]pkg1_report.MetadataRow, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []pkg1_report.MetadataRow{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 80)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]pkg1_report.MetadataRow, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		yyj1 := 0
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && len(yyv1) == 0 {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 80)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]pkg1_report.MetadataRow, yyrl1)
				yyc1 = true
			}
			// if indefinite, etc, then expand the slice if necessary
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, pkg1_report.MetadataRow{})
				yyc1 = true

			}
			yyh1.ElemContainerState(yyj1)
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = pkg1_report.MetadataRow{}
				} else {
					yyv2 := &yyv1[yyj1]
					yyv2.CodecDecodeSelf(d)
				}

			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]pkg1_report.MetadataRow, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}

}

func (x codecSelfer5934) encconnectionsByID(v connectionsByID, e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem5934)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x codecSelfer5934) decconnectionsByID(v *connectionsByID, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Connection{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 88)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Connection, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		yyj1 := 0
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && len(yyv1) == 0 {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 88)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]Connection, yyrl1)
				yyc1 = true
			}
			// if indefinite, etc, then expand the slice if necessary
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Connection{})
				yyc1 = true

			}
			yyh1.ElemContainerState(yyj1)
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Connection{}
				} else {
					yyv2 := &yyv1[yyj1]
					yyv2.CodecDecodeSelf(d)
				}

			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]Connection, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}

}

func (x codecSelfer5934) encSliceParent(v []Parent, e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem5934)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x codecSelfer5934) decSliceParent(v *[]Parent, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Parent{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 48)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Parent, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		yyj1 := 0
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && len(yyv1) == 0 {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 48)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]Parent, yyrl1)
				yyc1 = true
			}
			// if indefinite, etc, then expand the slice if necessary
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Parent{})
				yyc1 = true

			}
			yyh1.ElemContainerState(yyj1)
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Parent{}
				} else {
					yyv2 := &yyv1[yyj1]
					yyv2.CodecDecodeSelf(d)
				}

			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]Parent, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}

}

func (x codecSelfer5934) encSlicereport_MetricRow(v []pkg1_report.MetricRow, e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem5934)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x codecSelfer5934) decSlicereport_MetricRow(v *[]pkg1_report.MetricRow, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []pkg1_report.MetricRow{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 112)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]pkg1_report.MetricRow, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		yyj1 := 0
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && len(yyv1) == 0 {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 112)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]pkg1_report.MetricRow, yyrl1)
				yyc1 = true
			}
			// if indefinite, etc, then expand the slice if necessary
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, pkg1_report.MetricRow{})
				yyc1 = true

			}
			yyh1.ElemContainerState(yyj1)
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = pkg1_report.MetricRow{}
				} else {
					yyv2 := &yyv1[yyj1]
					yyv2.CodecDecodeSelf(d)
				}

			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]pkg1_report.MetricRow, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}

}

func (x codecSelfer5934) encSlicereport_Table(v []pkg1_report.Table, e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem5934)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x codecSelfer5934) decSlicereport_Table(v *[]pkg1_report.Table, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []pkg1_report.Table{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 104)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]pkg1_report.Table, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		yyj1 := 0
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && len(yyv1) == 0 {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 104)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]pkg1_report.Table, yyrl1)
				yyc1 = true
			}
			// if indefinite, etc, then expand the slice if necessary
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, pkg1_report.Table{})
				yyc1 = true

			}
			yyh1.ElemContainerState(yyj1)
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = pkg1_report.Table{}
				} else {
					yyv2 := &yyv1[yyj1]
					yyv2.CodecDecodeSelf(d)
				}

			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]pkg1_report.Table, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}

}

func (x codecSelfer5934) encSliceControlInstance(v []ControlInstance, e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem5934)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x codecSelfer5934) decSliceControlInstance(v *[]ControlInstance, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []ControlInstance{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 88)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]ControlInstance, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		yyj1 := 0
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && len(yyv1) == 0 {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 88)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]ControlInstance, yyrl1)
				yyc1 = true
			}
			// if indefinite, etc, then expand the slice if necessary
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, ControlInstance{})
				yyc1 = true

			}
			yyh1.ElemContainerState(yyj1)
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ControlInstance{}
				} else {
					yyv2 := &yyv1[yyj1]
					yyv2.CodecDecodeSelf(d)
				}

			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]ControlInstance, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}

}

func (x codecSelfer5934) encSliceNodeSummaryGroup(v []NodeSummaryGroup, e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem5934)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x codecSelfer5934) decSliceNodeSummaryGroup(v *[]NodeSummaryGroup, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []NodeSummaryGroup{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 96)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]NodeSummaryGroup, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		yyj1 := 0
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && len(yyv1) == 0 {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 96)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]NodeSummaryGroup, yyrl1)
				yyc1 = true
			}
			// if indefinite, etc, then expand the slice if necessary
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, NodeSummaryGroup{})
				yyc1 = true

			}
			yyh1.ElemContainerState(yyj1)
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = NodeSummaryGroup{}
				} else {
					yyv2 := &yyv1[yyj1]
					yyv2.CodecDecodeSelf(d)
				}

			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]NodeSummaryGroup, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}

}

func (x codecSelfer5934) encSliceConnectionsSummary(v []ConnectionsSummary, e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem5934)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x codecSelfer5934) decSliceConnectionsSummary(v *[]ConnectionsSummary, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []ConnectionsSummary{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 96)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]ConnectionsSummary, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		yyj1 := 0
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && len(yyv1) == 0 {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 96)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]ConnectionsSummary, yyrl1)
				yyc1 = true
			}
			// if indefinite, etc, then expand the slice if necessary
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, ConnectionsSummary{})
				yyc1 = true

			}
			yyh1.ElemContainerState(yyj1)
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ConnectionsSummary{}
				} else {
					yyv2 := &yyv1[yyj1]
					yyv2.CodecDecodeSelf(d)
				}

			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]ConnectionsSummary, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}

}

func (x codecSelfer5934) encSliceNodeSummary(v []NodeSummary, e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem5934)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x codecSelfer5934) decSliceNodeSummary(v *[]NodeSummary, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []NodeSummary{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 224)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]NodeSummary, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		yyj1 := 0
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && len(yyv1) == 0 {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 224)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]NodeSummary, yyrl1)
				yyc1 = true
			}
			// if indefinite, etc, then expand the slice if necessary
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, NodeSummary{})
				yyc1 = true

			}
			yyh1.ElemContainerState(yyj1)
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = NodeSummary{}
				} else {
					yyv2 := &yyv1[yyj1]
					yyv2.CodecDecodeSelf(d)
				}

			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]NodeSummary, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}

}

func (x codecSelfer5934) encnodeSummariesByID(v nodeSummariesByID, e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem5934)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd5934)
}

func (x codecSelfer5934) decnodeSummariesByID(v *nodeSummariesByID, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []NodeSummary{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 224)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]NodeSummary, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		yyj1 := 0
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && len(yyv1) == 0 {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 224)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]NodeSummary, yyrl1)
				yyc1 = true
			}
			// if indefinite, etc, then expand the slice if necessary
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, NodeSummary{})
				yyc1 = true

			}
			yyh1.ElemContainerState(yyj1)
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = NodeSummary{}
				} else {
					yyv2 := &yyv1[yyj1]
					yyv2.CodecDecodeSelf(d)
				}

			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]NodeSummary, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}

}

func (x codecSelfer5934) encNodeSummaries(v NodeSummaries, e *codec1978.Encoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey5934)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF85934, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue5934)
		yy3 := &yyv1
		yy3.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd5934)
}

func (x codecSelfer5934) decNodeSummaries(v *NodeSummaries, d *codec1978.Decoder) {
	var h codecSelfer5934
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 240)
		yyv1 = make(map[string]NodeSummary, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 NodeSummary
	var yymg1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey5934)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = NodeSummary{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue5934)
			if r.TryDecodeAsNil() {
				yymv1 = NodeSummary{}
			} else {
				yyv4 := &yymv1
				yyv4.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd5934)
}
